Programmers: Basanta Kharel
	     Brial Lee
Assignment 3. Mailbox

https://github.com/basanta078/linux-370/
http://cs370bl389.blogspot.com/2014/02/project-3.html

Wrapper function is under Wrapper/Mailbox/mailer.c

mailer.c has the main process fork a child and the child fork a grandchild.
Each of the 3 processes sends a message each to the 2 other processes, making
a total of 2 message send per process. 

And all 3 processes wait and receive messages until they get 2 messages. When they do
they exit. 


The first thing we did was to add a list_head element called message_list to task_struct.
That was easy but we have to initialize a list_head before it can be used.
For that it needs to be initialized when a process is created. 

The process is as follows. Task is created as a result of a fork(), which calls do_fork() to create 
a new task. Inside do_fork it call copy_process to initialize the task properly. This is where the other
head_list like children are initialized. 
We simply had to add INIT_LIST_HEAD(&p->message_list); Here p points to the task struct.

In order for the mailbox to work we needed a struct which was named Struct Mailbox.
It has 4 elements, char * message, int msg_size, int pid (the one it received from), and list_head to connect
it to the message_list in task_struct.

So the backbone is set.

Now for the syscalls.
mysend takes pid, len and buffer. 
It converts the buffer to kernel space, checks that pid is valid, makes a mailbox struct adds the info to it.
Initialize the list_head in mailbox and adds it to the message_list. 
list_add_tail(&(msg->message_list), &(task->message_list));
We had some trouble figuring out the memory stuff. We were not kmallocing but just initializing mailbox in local scope
so when the syscall was done, the memory would disappear. 

The next syscall was myreceive, taking pid, len, and buff
The pid is from the task it is receiving from. 
myreceive returns 0 if the message_list is empty.
If not and pid is positive, it iterates through the list and finds a message with that pid. 
Then it converts the message to user space and deletes the message from the list.

The syscalls are not blocking at all. So when a mysend sends a message it is not waiting for another process to receive it.
It is just added to the receiver's message_list. Same with myreceive, if there is not message 0 is returned. If the pid passed
has not send any message also a 0 is send back.

-----------------------------------------------------------------------------------
Programmers: Basanta Kharel
	     Brian Lee
Assignment 2. System Calls

https://github.com/basanta078/linux-370/
http://cs370bl389.blogspot.com/2014/02/project-2.html

Wrapper functions are under wrappers folder in root directory.

1. steal syscall: gives root privileges to a process.
	All you need to do is call steal passing the pid of the process you want. The wrapper program takes process id as command parameter
        and calls the steal syscall which is 286th syscall.
        If no argument is passed it gives an error.
        And if the pid doesnot exist it will say so, other wise the process gets root privileges.
	
(output of test run)[wrappers/steal.c]:
	user@debian-amd64:~$ ./steal 1631                                               
        Type bash to get root access. If you passed a bash pid                                                    
        user@debian-amd64:~$ bash                                                       
        root@debian-amd64:~#	

2.quad syscall: quadruples the current timeslice of a process.
	The syscall given a pid retrieves the task_struct and quadruples the time slice and return the new timeslice.
	The wrapper function takes pid as command parameter and calls quad syscall [287]. 
	It prints out the pid given and the new quadrupled timeslice.

(test run)[wrappers/quad.c]:
	user@debian-amd64:~$ ./quad 1684                                                
        Process ID: 1684                                                                
        New time slice: 44 

3. swipe syscall: target pid takes timeslices of victim and it's children
	The syscall given a target and a victim, transfers timeslice of victim to target and also iterates through the children of the target and steals their 
	timeslice too. 
	The wrapper function takes target and victim as command parameters and calls the steal syscall [289]
(test run)[wrappers/swipe.c]
	user@debian-amd64:~$ ./swipe 1787 1782                                          
        Victim 1782                                                                     
        Target: 1787                                                                    
        New time slice: 70 

4. zombify syscall: makes a process a zombie
	The syscall given a target pid sets the tak's exit-state to EXIT_ZOMBIE.
	The wrapper function takes target as a command parameter and calls the zombify syscall[290]
(test run)[wrappers/zombify.c]
	user@debian-amd64:~$ ./zomb 1680                                                
        user@debian-amd64:~$ ps                                                         
        PID TTY          TIME CMD                                                     
        1645 tty1     00:00:00 bash                                                    
        1679 tty1     00:00:11 parent                                                  
        1680 tty1     00:00:10 parent <defunct>                                        
        1683 tty1     00:00:00 ps 

5. myjoin syscall: Makes the current process TASK_UNINTERRUPTIBLE until the target exits
	For this assignment a new field to task_struct was added called join_to which stores a pointer to a task_struct
	When this syscall is called with a target id, the task_struct of the current process is assigned to the target's join_to and the current process is set to 
	TASK_UNINTERRUPTIBLE and a call to schedule() is performed.
	In the do_exit() whenever a task exits, it will check if join_to is not empty and if so it wakes up the joined process making it running again.
	And to insure that the target doesnot end before the current process sleeps, a lock is used.
	
	The wrapper function takes target as a command parameter and calls the myjoin syscall [289].
	It prints the current process id, which is the process that is waiting for the target to end.
	When the target exits, it prints 'Finished waiting'.
(test run)[wrappers/myjoin.c]
	user@debian-amd64:~$ ./join 1704 &                              
        [2] 1706                                                                        
        user@debian-amd64:~$ Process ID: 1706                                           
        ps                                                                              
        PID TTY          TIME CMD                                                     
        1645 tty1     00:00:00 bash                                                    
        1704 tty1     00:00:21 loop                                                    
        1706 tty1     00:00:00 join                                                    
        1707 tty1     00:00:00 ps                                                      
        user@debian-amd64:~$ kill 1704                                                  
        user@debian-amd64:~$ [  969.412882] Making the join_to running again for 1706   
        returned 0                                                                     
        Finished waiting                                                                
        [1]-  Terminated              ./loop                                            
        [2]+  Done                    ./join 1704  

6. forcewrite syscall: Ignores the file permissions while writing to a file
	The syscall is same as sys_write but doesnot care about the file permissions. The syscall takes fd, the buffer and the count of the buffer.
	To get a fd without permissions another syscall was created called sys_forceopen that takes filename, flags and mode to give a file descriptor.
	
	The wrapper first gets fd of a file calle lala.txt with permission of 111 by calling forceopen syscall[291]. It checks if fd is not -1 and prints working if 
	it is not -1 and also prints the fd. Then it calls forcewrite [292] giving a buffer to write to the file.

(text run)[wrappers/forcewrite.c]
	user@debian-amd64:~$ chmod 111 lala.txt                                         
	user@debian-amd64:~$ ./force                                                    
        working                                                                         
        Value 3            


....................................................
Programmer : Basanta Kharel
	 Drexel University
	 CS 370 Operating Systems
	 
Linux kernel tryout 2.6.22.19-Kharel 

This is the linux kernel modified for the course CS370.

The initial kernel source was downloaded from cs543's modified version of 
the original kernel to make it more easier to install in a kvm in Drexel tux 
server.

For the config, the config file was downloaded from Professor Bill Mongan's 
resources, which is https://www.cs.drexel.edu/~wmm24/cs370/resources/config-2.6.22.19-debian

Kernel Debugger was also installed using these files:
kdb-v4.4-2.6.22-rc7-common-1.bz2 and kdb-v4.4-2.6.22-rc7-i386-1.bz2 and kdb-v4.4-2.6.22-rc7-x86_64-1.bz2 (external links, no guarantees!) from http://oss.sgi.com/projects/kdb/.

The Build process:
	make EXTRAVERSION='.19-KHAREL' -j8
Which then build a file at arch/x86_64/boot/bzimage

And to boot the custom kernel:
	kvm -curses -kernel arch/x86_64/boot/bzImage -append 'root=/dev/hda1 ro' -drive file=../local.qcow2 --redir tcp:2222::22

The main.c under init was modified to print "Hello World from Me" if passed 'printme parameter while booting the kernel. 
Example:
 kvm -curses -kernel arch/x86_64/boot/bzImage -append 'root=/dev/hda1 ro printme' -drive file=../local.qcow2 --redir tcp:2222::22


